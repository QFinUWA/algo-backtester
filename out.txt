c:\Users\isaac\git\algo-backtester\src\qfinuwa\API.py:85: UserWarning: Parsing dates in DD/MM/YYYY format when dayfirst=False (the default) was specified. This may lead to inconsistently parsed dates! Specify a format to ensure consistent parsing.
  last = (pd.to_datetime(today) - pd.DateOffset(months=months+1))
c:\Users\isaac\git\algo-backtester\src\qfinuwa\API.py:86: UserWarning: Parsing dates in DD/MM/YYYY format when dayfirst=False (the default) was specified. This may lead to inconsistently parsed dates! Specify a format to ensure consistent parsing.
  month_periods = pd.date_range(start=last, end=today, freq='M').strftime("%Y-%m")
> Saving PXD (356447 rows):   0%|          | 0/38 [00:23<?, ?it/s] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving AM (351471 rows):   3%|▎         | 1/38 [01:13<37:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
  > Saving CHK (295368 rows):   5%|▌         | 2/38 [02:12<36:00, 60.01s/it] 
  Index(['timestamp', 'open', 'high', 'low', 'close', 'volume', '{'], dtype='object')
> Fetching LNG (16 threads):   8%|▊         | 3/38 [03:00<35:00, 60.01s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching MRO (16 threads):  11%|█         | 4/38 [04:00<34:00, 60.01s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving RRC (361650 rows):  13%|█▎        | 5/38 [05:13<33:00, 60.02s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching HES (16 threads):  16%|█▌        | 6/38 [06:00<32:00, 60.02s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving TRGP (342697 rows):  18%|█▊        | 7/38 [07:12<31:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching ENPH (16 threads):  21%|██        | 8/38 [08:00<30:00, 60.01s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching MPC (16 threads):  24%|██▎       | 9/38 [09:00<29:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving FANG (366655 rows):  26%|██▋       | 10/38 [10:13<28:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving OKE (359679 rows):  29%|██▉       | 11/38 [11:14<27:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving KMI (378347 rows):  32%|███▏      | 12/38 [12:14<26:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving DVN (414952 rows):  34%|███▍      | 13/38 [13:15<25:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving EOG (361877 rows):  37%|███▋      | 14/38 [14:13<24:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching EQT (16 threads):  39%|███▉      | 15/38 [15:00<23:00, 60.01s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving DTM (160083 rows):  42%|████▏     | 16/38 [16:08<22:00, 60.01s/it] 
Index(['{', 'timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving CVX (408426 rows):  45%|████▍     | 17/38 [17:16<21:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving COP (375608 rows):  47%|████▋     | 18/38 [18:14<20:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching NFE (16 threads):  50%|█████     | 19/38 [19:00<19:00, 60.01s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching CHPT (16 threads):  53%|█████▎    | 20/38 [20:03<18:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
WFFUT - Error parsing timestamp
> Saving CHPT (397168 rows):  53%|█████▎    | 20/38 [20:19<18:00, 60.01s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving AR (370018 rows):  55%|█████▌    | 21/38 [21:17<17:18, 61.06s/it]  
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching OVV (16 threads):  58%|█████▊    | 22/38 [22:03<16:12, 60.75s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving PDCE (322822 rows):  61%|██████    | 23/38 [23:17<15:07, 60.53s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching PSX (16 threads):  63%|██████▎   | 24/38 [24:03<14:05, 60.37s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching SWN (16 threads):  66%|██████▌   | 25/38 [25:03<13:03, 60.26s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching VLO (16 threads):  68%|██████▊   | 26/38 [26:03<12:02, 60.19s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving WMB (354966 rows):  71%|███████   | 27/38 [27:17<11:01, 60.14s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving FSLR (361936 rows):  74%|███████▎  | 28/38 [28:17<10:01, 60.10s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving APA (398279 rows):  76%|███████▋  | 29/38 [29:19<09:00, 60.08s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving OXY (521581 rows):  79%|███████▉  | 30/38 [30:21<08:00, 60.05s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving DINO (346450 rows):  82%|████████▏ | 31/38 [31:18<07:00, 60.04s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving XOM (484466 rows):  84%|████████▍ | 32/38 [32:22<06:00, 60.03s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving CTRA (301109 rows):  87%|████████▋ | 33/38 [33:16<05:00, 60.03s/it] 
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching PLUG (16 threads):  89%|████████▉ | 34/38 [34:03<04:00, 60.03s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Saving TPL (40393 rows):  92%|█████████▏| 35/38 [35:10<03:00, 60.02s/it]   
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Fetching IYE (16 threads):  95%|█████████▍| 36/38 [36:03<02:00, 60.02s/it]
Index(['timestamp', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
> Done Fetching:  97%|█████████▋| 37/38 [37:03<01:00, 60.11s/it]            
> Alligning new\CHK.csv:   5%|▌         | 2/37 [01:21<19:35, 33.59s/it]c:\Users\isaac\git\algo-backtester\src\qfinuwa\API.py:248: FutureWarning: reindexing with a non-unique Index is deprecated and will raise in a future version.
  new_df = df.reindex(new_index, axis=0).interpolate(method='linear')



CHK - 0.62	
DTM - 0.29
WFFUT - 0.03
= 99.04%
